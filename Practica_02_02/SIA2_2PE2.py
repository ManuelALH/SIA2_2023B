# -*- coding: utf-8 -*-
"""SIA2 - P2E2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stbGMBusJpibtC5fKgaHpE1gLaboMz_c
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt

class Clasificador:
    def __init__(self, tipo) -> None:
        self.dataset = None
        self.tipo = tipo
        pass

    def RegresionLogistica(self):
        match self.tipo:
            case 1:
                x = self.dataset.drop("Class variable (0 or 1)", axis=1)
                y = self.dataset["Class variable (0 or 1)"]
            case 2:
                x = self.dataset[['X']]
                y = self.dataset['Y']
            case 3:
                x = self.dataset.drop("quality", axis=1)
                y = self.dataset["quality"]
                #y = (y > 6).astype(int)

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = LogisticRegression()
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)

        if self.tipo == 1:
            plt.scatter(xTest["Number of times pregnant"], xTest["Age (years)"], c=predecirY, s=30)
            plt.xlabel('Number of times pregnant')
            plt.ylabel('Age (years)')
        elif self.tipo == 3:
            plt.scatter(xTest["fixed acidity"], xTest["alcohol"], c=predecirY, s=30)
            plt.xlabel('fixed acidity')
            plt.ylabel('alcohol')
        plt.show()

    def kVecinos(self):
        match self.tipo:
            case 1:
                x = self.dataset.drop("Class variable (0 or 1)", axis=1)
                y = self.dataset["Class variable (0 or 1)"]
            case 2:
                x = self.dataset[['X']]
                y = self.dataset['Y']
            case 3:
                x = self.dataset.drop("quality", axis=1)
                y = self.dataset["quality"]

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        k = 3
        modelo = KNeighborsClassifier(n_neighbors=k)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)

        if self.tipo == 1:
            plt.scatter(xTest["Number of times pregnant"], xTest["Age (years)"], c=predecirY, s=30)
            plt.xlabel('Number of times pregnant')
            plt.ylabel('Age (years)')
        elif self.tipo == 3:
            plt.scatter(xTest["fixed acidity"], xTest["alcohol"], c=predecirY, s=30)
            plt.xlabel('fixed acidity')
            plt.ylabel('alcohol')
        plt.show()

    def SVMachine(self):
        match self.tipo:
            case 1:
                x = self.dataset.drop("Class variable (0 or 1)", axis=1)
                y = self.dataset["Class variable (0 or 1)"]
            case 2:
                x = self.dataset[['X']]
                y = self.dataset['Y']
            case 3:
                x = self.dataset.drop("quality", axis=1)
                y = self.dataset["quality"]

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = SVC(kernel='sigmoid', C=1.0)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)

        if self.tipo == 1:
            plt.scatter(xTest["Number of times pregnant"], xTest["Age (years)"], c=predecirY, s=30)
            plt.xlabel('Number of times pregnant')
            plt.ylabel('Age (years)')
        elif self.tipo == 3:
            plt.scatter(xTest["fixed acidity"], xTest["alcohol"], c=predecirY, s=30)
            plt.xlabel('fixed acidity')
            plt.ylabel('alcohol')
        plt.show()

    def naiveBayes(self):
        match self.tipo:
            case 1:
                x = self.dataset.drop("Class variable (0 or 1)", axis=1)
                y = self.dataset["Class variable (0 or 1)"]
            case 2:
                x = self.dataset[['X']]
                y = self.dataset['Y']
            case 3:
                x = self.dataset.drop("quality", axis=1)
                y = self.dataset["quality"]

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = MultinomialNB()
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)

        if self.tipo == 1:
            plt.scatter(xTest["Number of times pregnant"], xTest["Age (years)"], c=predecirY, s=30)
            plt.xlabel('Number of times pregnant')
            plt.ylabel('Age (years)')
        elif self.tipo == 3:
            plt.scatter(xTest["fixed acidity"], xTest["alcohol"], c=predecirY, s=30)
            plt.xlabel('fixed acidity')
            plt.ylabel('alcohol')
        plt.show()

    def redNeuronal(self):
        match self.tipo:
            case 1:
                x = self.dataset.drop("Class variable (0 or 1)", axis=1)
                y = self.dataset["Class variable (0 or 1)"]
            case 2:
                x = self.dataset[['X']]
                y = self.dataset['Y']
            case 3:
                x = self.dataset.drop("quality", axis=1)
                y = self.dataset["quality"]

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', max_iter=1000)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)

        if self.tipo == 1:
            plt.scatter(xTest["Number of times pregnant"], xTest["Age (years)"], c=predecirY, s=30)
            plt.xlabel('Number of times pregnant')
            plt.ylabel('Age (years)')
        elif self.tipo == 3:
            plt.scatter(xTest["fixed acidity"], xTest["alcohol"], c=predecirY, s=30)
            plt.xlabel('fixed acidity')
            plt.ylabel('alcohol')
        plt.show()

    def leerDataSet(self):
        if self.tipo == 1:
            self.dataset = pd.read_csv("PimaIndiansDiabetes.csv", delimiter=",")
        elif self.tipo == 2:
            self.dataset = pd.read_csv("SwedishAutoInsurance.csv", delimiter=",")
        elif self.tipo == 3:
            self.dataset = pd.read_csv("WineQuality.csv", delimiter=";")

if __name__ == "__main__":
        pima = Clasificador(1)
        autos = Clasificador(2)
        wine = Clasificador(3)

        pima.leerDataSet()
        autos.leerDataSet()
        wine.leerDataSet()

        pima.RegresionLogistica()
        wine.RegresionLogistica()
        #autos.RegresionLogistica()

        pima.kVecinos()
        wine.kVecinos()

        pima.SVMachine()
        wine.SVMachine()

        pima.naiveBayes()
        wine.naiveBayes()

        pima.redNeuronal()
        wine.redNeuronal()