# -*- coding: utf-8 -*-
"""SIA2 - Proyecto Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3S8VhY-AmPozLYIyvHWKvYJt7uj7ghK
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt

class Clasificador:
    def __init__(self) -> None:
        self.dataset = None
        self.animal_class = {}

    def RegresionLogistica(self):
        x = self.dataset.drop(['Animal', 'Class'], axis=1)
        y = self.dataset['Class']

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = LogisticRegression()
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)
        precision = accuracy_score(yTest, predecirY)
        reporte = classification_report(yTest, predecirY)

        print("Regresion Logistica")
        print("Precision: {:.2f}".format(precision))
        print(reporte)

    def kVecinos(self):
        x = self.dataset.drop(['Animal', 'Class'], axis=1)
        y = self.dataset['Class']

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        k = 3
        modelo = KNeighborsClassifier(n_neighbors=k)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)
        precision = accuracy_score(yTest, predecirY)
        reporte = classification_report(yTest, predecirY)

        print("K Vecinos")
        print("Precision: {:.2f}".format(precision))
        print(reporte)

    def SVMachine(self):
        x = self.dataset.drop(['Animal', 'Class'], axis=1)
        y = self.dataset['Class']

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = SVC(kernel='sigmoid', C=1.0)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)
        precision = accuracy_score(yTest, predecirY)
        reporte = classification_report(yTest, predecirY)

        print("SVM")
        print("Precision: {:.2f}".format(precision))
        print(reporte)

    def naiveBayes(self):
        x = self.dataset.drop(['Animal', 'Class'], axis=1)
        y = self.dataset['Class']

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = MultinomialNB()
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)
        precision = accuracy_score(yTest, predecirY)
        reporte = classification_report(yTest, predecirY)

        print("Naive Bayes")
        print("Precision: {:.2f}".format(precision))
        print(reporte)

    def redNeuronal(self):
        x = self.dataset.drop(['Animal', 'Class'], axis=1)
        y = self.dataset['Class']

        xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2, random_state=42)
        modelo = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', max_iter=1000)
        modelo.fit(xTrain, yTrain)
        predecirY = modelo.predict(xTest)
        precision = accuracy_score(yTest, predecirY)
        reporte = classification_report(yTest, predecirY)

        print("Red Neuronal")
        print("Precision: {:.2f}".format(precision))
        print(reporte)

    def leerDataSet(self):
        self.dataset = pd.read_csv("zoo.data", header=None, names=[
            'Animal', 'Hair', 'Feathers', 'Eggs', 'Milk', 'Airborne', 'Aquatic', 'Predator',
            'Toothed', 'Backbone', 'Breathes', 'Venomous', 'Fins', 'Legs', 'Tail', 'Domestic', 'Catsize', 'Class'
        ])

if __name__ == "__main__":
        zoo = Clasificador()
        zoo.leerDataSet()

        zoo.RegresionLogistica()
        zoo.kVecinos()
        zoo.SVMachine()
        zoo.naiveBayes()
        zoo.redNeuronal()